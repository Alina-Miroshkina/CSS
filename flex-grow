.container {
  display: flex;
}

.item {
  flex-grow: 1;
}


Свойство flex-grow в CSS используется в контексте Flexbox для определения способности элемента расти относительно других элементов в контейнере. Оно задает "вес" гибкости элемента, что позволяет ему заполнять доступное пространство в контейнере.

Как использовать flex-grow:
Синтаксис:

Copy
.element {
    flex-grow: <number>;
}
Значения:

Числовое значение: Определяет, насколько элемент может расти относительно других элементов. Значение по умолчанию — 0, что означает, что элемент не будет расти.
Пример: Если у одного элемента flex-grow: 1, а у другого flex-grow: 2, второй элемент будет занимать в два раза больше доступного пространства, чем первый.
Пример использования:
HTML:
Copy
<div class="container">
    <div class="item" style="flex-grow: 1;">Item 1</div>
    <div class="item" style="flex-grow: 2;">Item 2</div>
    <div class="item" style="flex-grow: 1;">Item 3</div>
</div>
CSS:
Copy
.container {
    display: flex;
    width: 100%;
    border: 1px solid #ccc;
}

.item {
    padding: 20px;
    margin: 5px;
    background-color: #f0f0f0;
    border: 1px solid #ccc;
    text-align: center;
}
Объяснение:
HTML: Мы создаём три элемента с классом .item и задаём каждому из них значение свойства flex-grow.
CSS: Контейнер использует Flexbox, и элементы будут распределять доступное пространство в соответствии с заданными значениями flex-grow.
Результат:
Item 2 будет занимать в два раза больше пространства, чем Item 1 и Item 3, потому что у него значение flex-grow: 2, тогда как у других — flex-grow: 1.
Применение:
Flex-grow полезен, когда вам нужно, чтобы элементы заполняли доступное пространство в контейнере пропорционально. Это особенно полезно для создания адаптивных макетов, где элементы должны изменять свой размер в зависимости от размера контейнера.
Использование flex-grow позволяет гибко управлять распределением пространства между элементами в Flexbox-контейнере, что делает его мощным инструментом для создания адаптивных и динамичных макетов.
